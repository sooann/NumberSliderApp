<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<head>
<title>15 puzzle</title>
</head>
<body bgcolor=white background="images/backgrnd/cubeback.gif">

<div align=center><center>
<script language="JavaScript1.1" type="text/javascript">
<!--
version=1.1;
// -->
</script>
<script language="JavaScript" type="text/javascript">
<!--
if(version==null)
document.write("<p><font face='Arial' size=2><big><big><b>Your browser does not have Javascript 1.1 capabilities. "
            +"You need Netscape 3+ or MSIE 4+ to see the puzzle simulation.<\/b><\/big><\/big><\/font>");
//-->
</script>
<noscript>
     <p><font face="Arial" size=2><big><big><b>Your browser does not have Javascript 1.1 capabilities.
        You need Netscape 3+ or MSIE 4+ to see the puzzle simulation.</b></big></big></font>
</noscript>
<script language="JavaScript1.1" type="text/javascript">
<!--
    // Javascript written by Jaap Scherphuis. (jaapsch a t yahoo d o t com)

var imagedir="images/fifteen/";
function preload(){
    this.length=preload.arguments.length;
    for (var i=0;i<this.length;i++){
        this[i]=new Image();
        this[i].src=imagedir+preload.arguments[i];
    }
}

var pics=new preload("fift0l.gif","fift1l.gif","fift2l.gif","fift3l.gif","fift4l.gif",
                                        "fift5l.gif","fift6l.gif","fift7l.gif","fift8l.gif","fift9l.gif",
                                        "fift0r.gif","fift1r.gif","fift2r.gif","fift3r.gif","fift4r.gif",
                                        "fift5r.gif","fift6r.gif","fift7r.gif","fift8r.gif","fift9r.gif",
                                        "fiftbl.gif","fiftbr.gif","../buttons/blank.gif",
                                        "../buttons/edit.gif","../buttons/edit2.gif",
                                        "../buttons/solve.gif","../buttons/solve2.gif",
                                        "../buttons/mix.gif","../buttons/reset.gif",
                                        "../buttons/left.gif","../buttons/right.gif",
                                        "../buttons/up.gif","../buttons/down.gif",
                                        "../buttons/play.gif","../buttons/pause.gif",
                                        "../buttons/help.gif");
var posit = new Array ();
var maxhgh = 10;         //maximum height of board
var maxwid = 10;        //maximum width of board
var hgh = 4;            //height of board; 2-maxhgh
var wid = 4;            //width of board; 2-maxwid
var siz = 15;           //Number of tiles, = wid*hgh-1. Only have provision for 2-digit numbers on display
var mode = 0;           //0=normal  1=solving scrambled  2=edit  3=solving
var seq = new Array();  //solving sequence
var edt;                //next piece to place in edit mode
var blnkx,blnky;        //position of blank space

function initbrd(){
    blnkx=wid-1;
    blnky=hgh-1;
    for(i=0;i<=siz;i++) posit[i]=i;
}

function displaybrd(k){
    // display board; k set if must display blanks too.
    var c=0;  //name of screen image
    var d=0;  //position number on actual board
    var i,j;
    for (i=0;i<hgh;i++){
        for (j=0;j<wid;j++){
            if(posit[c]>=0 && posit[c]<siz){
                document.images["pcl"+d].src=pics[Math.floor((posit[c]+1)/10)].src;
                document.images["pcr"+d].src=pics[10+((1+posit[c])%10)].src;
            }else{
                document.images["pcl"+d].src=pics[20].src;
                document.images["pcr"+d].src=pics[21].src;
            }
            c++;
            d++;
        }
        if(k){
            for (;j<10;j++){
                document.images["pcl"+d].src=pics[22].src;
                document.images["pcr"+d].src=pics[22].src;
                d++;
            }
        }else{
            d+=10-j;
        }
    }
    if(k){
        for (;i<maxhgh;i++){
            for (var j=0;j<maxwid;j++){
                document.images["pcl"+d].src=pics[22].src;
                document.images["pcr"+d].src=pics[22].src;
                d++;
            }
        }
    }
}
function displaybut(){
    if(mode==2) document.images["edit"].src=pics[24].src;
    else document.images["edit"].src=pics[23].src;
    if(mode>=3) document.images["solve"].src=pics[26].src;
    else document.images["solve"].src=pics[25].src;
    if(mode==4) document.images["play"].src=pics[34].src;
    else document.images["play"].src=pics[33].src;

    if(mode==1 && solved()){
        alert("You solved it!\nYou don't get a prize for this though!");
        mode=0;
    }
}
function display(k){
    displaybrd(k);
    displaybut();
}


document.writeln("<table cellpadding=0 cellspacing=0 border=0>");
document.writeln("<tr><td align=center>");
document.write("<a href='javascript:size(0,-1);'><img src='"+pics[29].src+"' height=16 width=48 border=0><\/a>");
document.write("<a href='javascript:size(0, 1);'><img src='"+pics[30].src+"' height=16 width=48 border=0><\/a>");
document.write("<a href='javascript:size(-1,0);'><img src='"+pics[31].src+"' height=16 width=48 border=0><\/a>");
document.write("<a href='javascript:size( 1,0);'><img src='"+pics[32].src+"' height=16 width=48 border=0><\/a>");
document.writeln("<\/td><\/tr><tr><td height=5><\/td><\/tr><tr><td align=center>");
document.write("<a href='javascript:mix();'><img src='"+pics[27].src+"' height=16 width=48 border=0><\/a>");
document.write("<a href='javascript:reset();'><img src='"+pics[28].src+"' height=16 width=48 border=0><\/a>");
document.write("<a href='javascript:edit();'><img src='"+pics[23].src+"' height=16 width=48 border=0 name='edit'><\/a>");
document.write("<a href='javascript:help();'><img src='"+pics[35].src+"' height=16 width=48 border=0><\/a><br>");
document.write("<a href='javascript:solve();'><img src='"+pics[25].src+"' height=16 width=48 border=0 name='solve'><\/a>");
document.write("<a href='javascript:solplay();'><img src='"+pics[33].src+"' height=16 width=48 border=0 name='play'><\/a>");
document.writeln("<\/td><\/tr><tr><td height=5><\/td><\/tr><\/table>");
document.writeln("<table cellpadding=0 cellspacing=0 border=0>");
var c=0;
for(var i=0;i<maxhgh;i++){
    document.writeln("<tr>");
    for(var j=0;j<maxwid;j++){
        document.writeln("  <td width=20><a href='javascript:clicked("+i+","+j+");focus();'>"+
            "<img src='"+pics[22].src+"' height=20 width=10 border=0 name='pcl"+c+"'>"+
            "<img src='"+pics[22].src+"' height=20 width=10 border=0 name='pcr"+c+"'>"+
            "<\/a><\/td>");
        c++;
    }
    document.writeln("<\/tr>");
}
document.writeln("<\/table>");

function reset(){
    initbrd();
    mode=0;
    display(0);
}

reset();

function size(y,x){
    if(hgh+y>=2 && hgh+y<=maxhgh && wid+x>=2 && wid+x<=maxwid){
        hgh+=y;
        wid+=x;
        siz=hgh*wid-1;
        initbrd();
        mode=0;
        display(1);
    }
}

function solved(){
    for (var i=siz;i>=0;i--){
        if(posit[i]!=i) return(false);
    }
    return(true);
}

function mix(){
    var i,j,c=0;
    var pcs=new Array();
    for(i=0;i<=siz;i++) pcs[i]=i;
    pcs[siz-1]=-1;pcs[siz-2]=-1;
    for(i=0;i<hgh;i++){
        for(j=0;j<wid;j++){
            k=Math.floor(Math.random()*pcs.length);
            posit[c]=pcs[k];
            if(pcs[k]==siz) { blnkx=j; blnky=i; }
            pcs[k]=pcs[pcs.length-1];
            pcs.length--;
            c++;
        }
    }
    mode=1;
    filltwo();
}

function edit(){
    mode=2;
    //clear pieces
    for (var i=0;i<=siz;i++) posit[i]=-1;
    edt=0;   //first piece to be placed
    display(0);
}

function filltwo(){
    //First fill in last two tiles.
    var s1=-1;
    var s2=-1;
    for(var i=0;i<=siz;i++){
        if(posit[i]==-1){
            if(s1<0) {
                s1=i;
                posit[s1]=siz-1;
            }else{
                s2=i;
                posit[s2]=siz-2;
                break;
            }
        }
    }
    //check permutation parity
    var c=0;
    for(var i=1;i<=siz;i++){
        for(var j=0;j<i;j++){
            if(posit[j]>posit[i])c++;
        }
    }
    //Check position of blank space; move to bottom right
    c+=(wid-1)-blnkx+(hgh-1)-blnky;

    //if parity odd then swap
    if(c&1){
        posit[s1]=siz-2;
        posit[s2]=siz-1;
    }
    display(0);
}

function clicked(y,x){
    var c=y*wid+x;
    if(mode==2){  //editing
        if(posit[c]<0){
            posit[c]=edt; show(y,x);
            edt++;
            if(edt==siz-2) edt+=2
            if(edt>siz){ //filled all but two. Fill these so permutation correct
                blnkx=x;blnky=y;
                filltwo();
                mode=1;
                displaybut();
            }
        }
    }else if(mode!=4){  //do move
        if      (x==blnkx && y<hgh){
            while(y>blnky) { domove(2); show(blnky-1,blnkx);}
            while(y<blnky) { domove(1); show(blnky+1,blnkx);}
        }else if (y==blnky && x<wid){
            while(x>blnkx) { domove(3); show(blnky,blnkx-1);}
            while(x<blnkx) { domove(0); show(blnky,blnkx+1);}
        }
        if(mode==3) { mode=0; displaybut(); }
        show(blnky,blnkx);
        if(mode==1 && solved()){
            alert("You solved it!\nYou don't get a prize for this though!");
            mode=0;
        }
    }
}
function show(y,x){
    // Use this to update display of just one tile; quicker than updating all with display.
    var c=y*wid+x;
    var d=y*maxwid+x;
    if(posit[c]>=0 && posit[c]<siz){
        document.images["pcl"+d].src=pics[Math.floor((posit[c]+1)/10)].src;
        document.images["pcr"+d].src=pics[10+((1+posit[c])%10)].src;
    }else{
        document.images["pcl"+d].src=pics[20].src;
        document.images["pcr"+d].src=pics[21].src;
    }
}

function push(){
    //push list onto list of moves for solution. Also does moves without showing them.
    for (var i=0;i<push.arguments.length;i++){
        var c=push.arguments[i];
        if(seq.length && seq[seq.length-1]+c==3) seq.length--;
        else seq[seq.length]=c;
        domove(c);
    }
}

function domove(m){  //0=right, 1=down, 2=up, 3=left
    //does move without showing it.
    var d=blnkx+blnky*wid;
    if(m==0)     { posit[d]=posit[d-1  ]; posit[d-1  ]=siz; blnkx--; }
    else if(m==1){ posit[d]=posit[d-wid]; posit[d-wid]=siz; blnky--; }
    else if(m==2){ posit[d]=posit[d+wid]; posit[d+wid]=siz; blnky++; }
    else if(m==3){ posit[d]=posit[d+1  ]; posit[d+1  ]=siz; blnkx++; }
}


//Play back solution
var soltimer;
function solplay(){
    if(mode==4){
        // stop the play in progress
        clearTimeout(soltimer);
        mode=3;
        displaybut();
    }else if(mode!=2){
        // start play
        solve();
        if(mode==3){
            mode=4;
            soltimer=setTimeout("playstep()", 50);
            displaybut();
        }
    }
}
function playstep(){
    if(mode>=3){
        mode=4;
        solve();
        if(mode>=3) soltimer=setTimeout("playstep()", 50);
    }else{
        displaybut();
    }
}


var blocksolve=0;
function solve(){
    if(mode==0||mode==1){
        mode=3;blocksolve=1;displaybut();
        seq.length=0;

        //no solution set up yet. Construct it!
        //save pieces;
        var back = new Array();
        for(var i=0;i<=siz;i++) back[i]=posit[i];
        back[siz+1]=blnkx;
        back[siz+2]=blnky;

        //restore top rows
        var rr=0;
        for(var r=0; r<hgh-2;r++){
            for(var c=0;c<wid;c++) movepiece(rr+c,r,c);
            rr+=wid;
        }

        //restore left columns
        for(c=0;c<wid-2;c++){
            //restore top tile of column.
            movepiece(rr,hgh-2,c);
            //restore bottom tile of column
            if(blnkx==c) push(3);  //fill destination spot
            if(posit[rr+wid]!=rr+wid){
                movepiece(rr+wid,hgh-1,c+1);
                if(blnky!=hgh-1) {    //0=right, 1=down, 2=up, 3=left
                    //A.X or AX.
                    //XBX    XBX
                    if( blnkx==c+1 ) push(3);
                    push(2);
                }
                //AXX
                //XB.
                while( blnkx>c+2 ) push(0);
                push(0,0,1,3,2,3,1,0,0,2,3);
            }
            rr++;
        }
        //last 2x2 square
        if(blnkx<wid-1) push(3);
        if(blnky<hgh-1) push(2);
        rr=siz-wid-1;
        if(posit[rr]==rr+1)   push(1,0,2,3);
        if(posit[rr]==rr+wid) push(0,1,3,2);
        //restore pieces;
        for(var i=0;i<=siz;i++) posit[i]=back[i];
        blnkx=back[siz+1];
        blnky=back[siz+2];
        blocksolve=0;
    }

    if(mode>=3 && blocksolve==0){
        blocksolve=1;
        //do next move of prerecorded sequence
        if(seq.length){
            // var c=seq.shift();
            var c=seq[0];
            for(var i=1;i<seq.length;i++) seq[i-1]=seq[i];
            seq.length--;
            domove(c);
            if(c==0) show(blnky,blnkx+1);
            else if(c==1) show(blnky+1,blnkx);
            else if(c==2) show(blnky-1,blnkx);
            else if(c==3) show(blnky,blnkx-1);
            show(blnky,blnkx);
        }
        if(seq.length==0) { mode=0; displaybut(); }
        blocksolve=0;
    }
}
function movepiece(p,y,x){
    //moves piece p to position y,x without disturbing previously placed pieces.
    var c=-1;
    for(var i=0;i<hgh;i++){
        for(var j=0;j<wid;j++){
            c++;
            if(posit[c]==p) break;
        }
        if(posit[c]==p) break;
    }
    //Move piece to same column         //0=right, 1=down, 2=up, 3=left
    if(j<x && blnky==y) push(2);    // move blank down if it might disturb solved pieces.
    while(j>x){
        //move piece to left
        //First move blank to left hand side of it
        if(blnky==i && blnkx>j){    //if blank on wrong side of piece
            if(i==hgh-1) push(1); else push(2); //then move it to other row
        }
        while(blnkx>=j) push(0);    // move blank to column left of piece
        while(blnkx<j-1) push(3);
        while(blnky<i) push(2);     // move blank to same row as piece
        while(blnky>i) push(1);
        push(3);                    // move piece to left.
        j--;
    }
    while(j<x){
        //move piece to right
        //First move blank to right hand side of it
        if(blnky==i && blnkx<j){
            if(i==hgh-1) push(1); else push(2);
        }
        while(blnkx<=j) push(3);
        while(blnkx>j+1) push(0);
        while(blnky<i) push(2);
        while(blnky>i) push(1);
        push(0);
        j++;
    }

    //Move piece up to same row         //0=right, 1=down, 2=up, 3=left
    while(i>y){
        if(y<i-1){
            while(blnky<i-1) push(2);
            if(blnkx==j) push( j==wid-1? 0:3);
            while(blnky>i-1) push(1);
            while(blnkx<j) push(3);
            while(blnkx>j) push(0);
            push(2);
        }else{
            if(j!=wid-1){
                if(blnky==i) push(2);
                while(blnkx<j+1) push(3);
                while(blnkx>j+1) push(0);
                while(blnky>i-1) push(1);
                while(blnky<i-1) push(2);
                push(0,2);
            }else{
                if(blnky<i && blnkx==j){
                    while(blnky<i) push(2);
                }else{
                    while(blnky>i+1) push(1);
                    while(blnky<i+1) push(2);
                    while(blnkx<j) push(3);
                    while(blnkx>j) push(0);
                    push(1,1,0,2,3,2,0,1,1,3,2);
                }
            }
        }
        i--;
    }
    while(i<y){
        //move piece downwards
        //First move blank below tile
        if(blnkx==j && blnky<i){
            if(j==wid-1) push(0); else push(3);
        }
        while(blnky>i+1) push(1);
        while(blnky<i+1) push(2);
        while(blnkx<j) push(3);
        while(blnkx>j) push(0);
        push(1);
        i++;
    }
}


function help(){
    alert(
        "The 15-puzzle\n\n"+
        "The aim is to arrange the pieces in numerical order,\n"+
        "left to right, top to bottom, with the blank space at\n"+
        "the bottom right.\n"+
        "To move a piece, just click on it and it will move towards\n"+
        "the empty space. You can move several pieces at once.\n"+
        "\nFurther controls:\n"+
        "Arrows: These change the size of the puzzle.\n"+
        "Mix:    This button randomly mixes the puzzle up.\n"+
        "Reset:  Resets the puzzle to the initial position.\n"+
        "Edit:   Allows you to set up any position. The pieces are\n"+
        "        cleared, and you can then click the spaces to\n"+
        "        place the pieces there. When there are only 3\n"+
        "        spaces left, click the position where the blank\n"+
        "        should be, and the other two tiles will be placed\n"+
        "        so that the puzzle is solvable.\n"+
        "Solve:  Solves the puzzle. Each time you click this button,\n"+
        "        one move is performed, until the puzzle is solved.\n"+
        "Play:   This solves the puzzle, playing through the whole\n"+
        "        solution automatically. Press it again to pause.\n"+
        "Help:   Shows this help screen.\n"
    );
}

// -->
</script>

</center></div>
</body>
</html>
